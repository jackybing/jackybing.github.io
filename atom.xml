<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacky-朱建兵</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhujianbing.com/"/>
  <updated>2016-11-24T04:30:15.746Z</updated>
  <id>http://www.zhujianbing.com/</id>
  
  <author>
    <name>朱建兵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo+github pages+域名绑定折腾记</title>
    <link href="http://www.zhujianbing.com//blog/2016/11/hexo-github-pages-%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E6%8A%98%E8%85%BE%E8%AE%B0.html"/>
    <id>http://www.zhujianbing.com//blog/2016/11/hexo-github-pages-域名绑定折腾记.html</id>
    <published>2016-11-23T04:28:57.000Z</published>
    <updated>2016-11-24T04:30:15.746Z</updated>
    
    <content type="html"><![CDATA[<p>通过<strong>github pages</strong>来搭建专属于自己的技术博客是当前比较流行和方便的途径，结合轻量级静态博客框架<strong>hexo</strong>，便可以很快搭建一款属于自己的技术博客，再通过<strong>github</strong>托管自己的静态网站代码，安全、稳定、免费，同时<strong>github pages</strong>支持域名绑定，完成相关绑定后，即可通过域名来访问自己的博客空间。其实，搭建专属于自己的博客平台，好处还是蛮多的，一来可以从头到属实践建站流程，二来可以方便、自由地针对自己的喜好来完成各种定制化功能版块，满足技术流专有的<strong>瞎折腾</strong>欲望。这篇文章主要是记录<a href="http://www.zhujianbing.com">博主</a>整合<strong>hexo</strong>+<strong>github pages</strong>+<strong>域名绑定</strong>的全过程，也给后来人多一个参考、学习、交流的机会。</p>
<a id="more"></a>
<h3 id="hexo安装记"><a href="#hexo安装记" class="headerlink" title="hexo安装记"></a>hexo安装记</h3><p><strong>hexo</strong>是一个简单、轻量、基于<strong>Node.js</strong>的静态博客框架，既然它是基于<strong>Node.js</strong>自然也就需要依赖<strong>Node.js</strong>平台，所以在本地安装好<strong>Node.js</strong>是前提。安装很简单，无论是windows系统还是linux系统，通过其<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载对应的版本安装即可（ps:由于墙的存在，下载速度比较慢，建议大家去其他资源网站下载对应版本），考虑到平时自己平时写博客主要是在windows环境下完成，自然就决定在windows环境下搭建好各种所需要软件信息呢，下文的所有安装、配置操作说明都是基于<strong>win7</strong>且已提前完成<strong>Node.js</strong>安装，至于<strong>linux</strong>系统环境的搭建基本类似，在此就不在赘述，请自行谷歌、百度。</p>
<h3 id="github-pages-respos创建"><a href="#github-pages-respos创建" class="headerlink" title="github pages respos创建"></a>github pages respos创建</h3><p>创建github pages respos时，和创建普通的respos过程没有区别，唯一需要注意的是respos名字是固定的：yourname.github.io，名字是注册时填写的用户名，过程很简单，在github右上方选择respository -&gt; 输入respos名称yourname.github.io -&gt; 点击完成即可。完成respos创建是为了将博客代码托管到当前respos中，通过下文介绍的hexo deploy命令方便快捷地完成博文的上传更新操作。</p>
<h3 id="hexo-环境安装"><a href="#hexo-环境安装" class="headerlink" title="hexo 环境安装"></a>hexo 环境安装</h3><h4 id="hexo-框架安装"><a href="#hexo-框架安装" class="headerlink" title="hexo 框架安装"></a>hexo 框架安装</h4><p>完成<strong>Node.js</strong>安装前提下，<strong>hexo</strong>的安装很简单，打开<strong>Node.js</strong>命令窗口，输入下面几行命令即可搞定：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div><div class="line">npm install hexo -g</div></pre></td></tr></table></figure>
<h4 id="hexo-插件安装（建议安装，后面定制化各种插件功能需要使用）"><a href="#hexo-插件安装（建议安装，后面定制化各种插件功能需要使用）" class="headerlink" title="hexo 插件安装（建议安装，后面定制化各种插件功能需要使用）"></a>hexo 插件安装（建议安装，后面定制化各种插件功能需要使用）</h4><p>hexo 插件安装非常简单，常用的插件也就十来种，建议全部安装，后面基于Next主题配制其他第三方插件也需要部分插件才能工作，下面是主要插件的安装命令，直接拷贝运行即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure>
<h4 id="hexo-简易使用说明"><a href="#hexo-简易使用说明" class="headerlink" title="hexo 简易使用说明"></a>hexo 简易使用说明</h4><p>在安装好<strong>hexo</strong>及相关插件后，接下来我们就可能通过<strong>hexo</strong>命令来完成博客目录的初始化</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 建立一个博客目录，并初始化博客，hexo为文件夹的名称，本地创建了一名称为hexo目录</div><div class="line">hexo init hexo</div></pre></td></tr></table></figure>
<p>初始化完成后，进入hexo目录后，能看到如下如下目录结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── <span class="built_in">source</span></div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>上面每个目录和文件的具体说明请大家参考<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="external">hexo-建站</a>，这里就不再啰嗦呢。初始化后的博客默认会下载并使用landscape 主题（theme),在themes目录下有landscape 主题目录，到这里，大家就可以启动hexo，查看博客效果呢，在<strong>Node.js</strong>命令行工具下，进入hexo目录下，输入如下几行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean //删除工具，主要是完成对上次构建产生的静态资源（html等相关文件）的清楚</div><div class="line">hexo generate //基于最新的资源构建博客的各种静态资源（html等相关文件），命令可以简化为:hexo g</div><div class="line">hexo serve //启动服务，以便在本地通过：http://localhost:4000/来查看博客界面效果</div></pre></td></tr></table></figure>
<p>启动成功后，通过在浏览器的地址栏中输入<a href="http://localhost:4000/即可查看到博客界面效果呢。__" target="_blank" rel="external">http://localhost:4000/即可查看到博客界面效果呢。__</a></p>
<h4 id="hexo-主题安装"><a href="#hexo-主题安装" class="headerlink" title="hexo 主题安装"></a>hexo 主题安装</h4><p>hexo一个便捷之处在于可以通过配置使用不用的主题，网上有很多开源的hexo主题，大家可以自动搜索浏览。hexo换主题很简单，把下载好的主题目录放置站点目录下的themes目录下并修改站点配置文件hexo/_config.yml里的theme配置项值为主题目录的名称即可。 由于hexo默认使用的主题样式不符合我的审美观，所以决定使用流行的<strong>Next</strong>主题，大家可以直接到其<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="external">github官网</a>下载最新版本，无论是clone还是download方式都可，下载到本地解压后将目录名称修改成next，然后再将此目录放置到hexo/themes目录下，同时修改hexo/_config.yml文件里的如下配置项信息：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next //把主题从landscape修改成为next</div></pre></td></tr></table></figure>
<p>完成后重启即可看到引用新主题的博客样式效果呢。<strong>Next</strong>主题很强大，配置灵活，可以集成多种第三方插件，比如搜索、统计、评论、分享等插件，具体配置请参考其<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官网</a>，这里就不再啰嗦呢。</p>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>安装<strong>git</strong>的目的是为了后期可以方便地将最新编辑完成的博文上传到github中，前提是安装了我们上面建议安装的hexo git 插件，修改站点配置文件hexo/_config.yml的deploy配置项：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:jackybing/jackybing.github.io.git //jackybing是github帐号名</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>然后直接通过如下命令就可以完成代码的提交工作，方便、快捷：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy //将代码提交到github 仓库，可以简写为：hexo d</div></pre></td></tr></table></figure>
<p>安装<strong>git</strong>的操作就自行百度之，这里就不再重复了，过程很简单，下载安装包（windows版本）-&gt;安装-&gt;生成ssh key-&gt;把公钥拷贝到github帐号下ssh keys集合即可。</p>
<h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>如果不想直接通过yourname.github.io来访问托管在github上的博客的话，需要自己单独购买注册域名，然后把解析设置好，同时在站点根目录下的source目录下新建名为<strong>CNAME</strong>文件，里面就是我们购买注册好的域名，<strong>注意</strong>：域名不要带<strong>http</strong>,直接填写域名，如:<strong>www.zhujianbing.com</strong>,同时将站点配置文件的<strong>url</strong>项值设置为带<strong>http</strong>开头的域名，如：<strong><a href="http://www.zhujianbing.com">http://www.zhujianbing.com</a></strong>即可。</p>
<h4 id="域名购买和解析"><a href="#域名购买和解析" class="headerlink" title="域名购买和解析"></a>域名购买和解析</h4><p>域名购买可以通过DNSPod或者万网进行购买，由于博主在购买时万网有优惠活动，所以就果断在万网注册购买了自己的专属域名：<strong>zhujianbing.com</strong>,在万网购买域名后，修改<strong>DNS*服务器：</strong>f1g1ns1.dnspod.net<strong>和</strong>f1g1ns2.dnspod.net<strong>，然后去</strong>DNSPod**注册个帐号，添加域名和记录。通过cmd命令行窗口，ping yourname.github.com,即可获取到github pages的专属ip（gp IP),然后添加A记录类型和CNAME类型即可：</p>
<table>
<thead>
<tr>
<th>主机记录</th>
<th style="text-align:center">记录类型</th>
<th style="text-align:right">线路</th>
<th style="text-align:right">记录值     </th>
</tr>
</thead>
<tbody>
<tr>
<td>@</td>
<td style="text-align:center">A</td>
<td style="text-align:right">默认</td>
<td style="text-align:right">gh IP       </td>
</tr>
<tr>
<td>www</td>
<td style="text-align:center">CNAME</td>
<td style="text-align:right">默认</td>
<td style="text-align:right">yourname.github.ip</td>
</tr>
</tbody>
</table>
<p>具体可参考<a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="external">【Hexo+Github】域名和github绑定的问题</a>此文章内容，比较简单，就不再赘述。</p>
<h4 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h4><p>完成域名购买和解析后，需要在站点目录的source目录下新建名为<strong>CNAME</strong>文件，内容就是我们购买注册好的域名，<strong>注意</strong>：域名不要带<strong>http</strong>,直接填写域名，如:<strong>www.zhujianbing.com</strong>,同时将站点配置文件的<strong>url</strong>项值设置为带<strong>http</strong>开关的域名，如：<strong><a href="http://www.zhujianbing.com">http://www.zhujianbing.com</a></strong>即可。最后重新clean -&gt;generate -&gt;deploy操作后，正常情况下，在半小时内域名解析即可完成，然后就可通过输入自己<a href="http://www.zhujianbing.com">专属域名</a>来访问个人博客呢。</p>
<p>到这一步，我们的hexo+github pages+域名绑定流程也算是正式完成呢，之间会遇到各种配置的小问题，尤其是Next相关的，通过查看其其<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="external">github官网</a>，再结合<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo 官网</a>，应该不会什么解决不了的大BUG问题呢！如果需要帮助，请在评论区留言，博主会在第一时间给予解答。</p>
<h3 id="Next-主题配置”坑”"><a href="#Next-主题配置”坑”" class="headerlink" title="Next 主题配置”坑”"></a>Next 主题配置”坑”</h3><ul>
<li><p>配置404.html界面：使用腾讯的404界面，其中homePageUrl项必须以<strong>http</strong>开头，不然无法返回主页</p>
<blockquote>
<p>homePageUrl=”<a href="http://www.zhujianbing.com">http://www.zhujianbing.com</a>“ //必须以http开头，不然无法解析成正确的主页地址</p>
</blockquote>
</li>
<li><p>修改Next默认字体和字号</p>
<p>  修改主题目录下的<strong>themes\next\source\css\_variables\custome.styl</strong>文件，添加下面代码，主要是设置自己想要的字体：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 标题，修改成你期望的字体族</div><div class="line"><span class="variable">$font</span>-family-headings = Georgia, sans</div><div class="line"></div><div class="line">// 修改成你期望的字体族</div><div class="line"><span class="variable">$font</span>-family-base = <span class="string">"Microsoft YaHei"</span>, Verdana, sans-serif</div><div class="line"></div><div class="line">// 代码字体</div><div class="line"><span class="variable">$code</span>-font-family = <span class="string">"Input Mono"</span>, <span class="string">"PT Mono"</span>, Consolas, Monaco, Menlo, monospace</div><div class="line"></div><div class="line">// 正文字体的大小</div><div class="line"><span class="variable">$font</span>-size-base = 16px</div><div class="line"></div><div class="line">// 代码字体的大小</div><div class="line"><span class="variable">$code</span>-font-size = 13px</div></pre></td></tr></table></figure>
</li>
<li><p>待续…</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实，<strong>hexo</strong>+<strong>github pages</strong>+<strong>域名绑定</strong>配置过程并不复杂，只有稍微具备些技术功能+搜索能力基本上都可以搞定，而<strong>Next</strong>主题的应用配置根据其官网说明，也都是依样画葫芦，没什么难度。对于有DIY欲的同学来说，如果想手工修改主题模式，那就必须具备些网页开发的基础呢！其实个人博客样式并不重要，重要的是里面的内容质量，唯有产生高价值的内容才会有较高的访问率，也才能达到我们写博客的目的：<strong>既方便自己加深知识的理解又给别人更多的参考交流机会</strong>。</p>
<blockquote>
<p>转载本站文章请注明作者和出处 Jacky-朱建兵 – zhujianbing.com ，请勿用于任何商业用途</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过&lt;strong&gt;github pages&lt;/strong&gt;来搭建专属于自己的技术博客是当前比较流行和方便的途径，结合轻量级静态博客框架&lt;strong&gt;hexo&lt;/strong&gt;，便可以很快搭建一款属于自己的技术博客，再通过&lt;strong&gt;github&lt;/strong&gt;托管自己的静态网站代码，安全、稳定、免费，同时&lt;strong&gt;github pages&lt;/strong&gt;支持域名绑定，完成相关绑定后，即可通过域名来访问自己的博客空间。其实，搭建专属于自己的博客平台，好处还是蛮多的，一来可以从头到属实践建站流程，二来可以方便、自由地针对自己的喜好来完成各种定制化功能版块，满足技术流专有的&lt;strong&gt;瞎折腾&lt;/strong&gt;欲望。这篇文章主要是记录&lt;a href=&quot;http://www.zhujianbing.com&quot;&gt;博主&lt;/a&gt;整合&lt;strong&gt;hexo&lt;/strong&gt;+&lt;strong&gt;github pages&lt;/strong&gt;+&lt;strong&gt;域名绑定&lt;/strong&gt;的全过程，也给后来人多一个参考、学习、交流的机会。&lt;/p&gt;
    
    </summary>
    
      <category term="编程工具" scheme="http://www.zhujianbing.com/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.zhujianbing.com/tags/hexo/"/>
    
      <category term="github" scheme="http://www.zhujianbing.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>2016年终述职报告</title>
    <link href="http://www.zhujianbing.com//blog/2016/11/2016%E5%B9%B4%E7%BB%88%E8%BF%B0%E8%81%8C%E6%8A%A5%E5%91%8A.html"/>
    <id>http://www.zhujianbing.com//blog/2016/11/2016年终述职报告.html</id>
    <published>2016-11-23T04:28:57.000Z</published>
    <updated>2017-01-06T11:09:21.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>又是一年年终述职季，2016已远去，2017正揭开幕布，无论是生理年龄还是心理年龄又都长了一岁，无论是工作还是生活，都有了新的身份与责任。回首2016工作历程，用三个词语概括，<strong>忙碌</strong>、<strong>学习</strong>、<strong>成长</strong>，即忙在工作、学在工作、成在工作。从当初的职场小白，慢慢成长为有能力独立完成工作的大白，这何尝不是一种历练和收获。下面是自己对2016年的本职工作的回顾、展望和总结概述：</p>
<a id="more"></a>
<h4 id="主要工作内容"><a href="#主要工作内容" class="headerlink" title="主要工作内容"></a>主要工作内容</h4><ol>
<li>参与非金融项目开发工作，从梳理需求到功能设计实现，负责的服务目录与对账模块已成功上线，运行稳定。<br>服务目录模块方面主要完成服务大类，服务类别、服务项目、特色活动、权益和权益套餐的新增、修改、审核、进度查询和撤销等一整套服务目录维护流程功能，方便业务人员可以较为简单、便捷地完成对各类服务目录的日常维护事宜；同时，针对不同服务项目不同部门的预约门槛判断规则，设计、实现一套较为灵活、可配的校验接口，用于各种渠道门槛判断，打通服务项目预约功能流程；<br>对账模块方面主要完成针对合作项目与服务项目按季度为周期的对账单生成、下载、反馈功能，协助批量定时对上一季度相关合作项目与服务项目的订单数据进行汇总和处理，打通合作伙伴线上完成对争议订单反馈流程，行内人员可实现对争议订单的最终核实处理；</li>
<li>负责系统日常上线事宜，主要完成对日常应用版本的打包、分发工作，并且负责测试环境版本的日常维护更新工作，通过编写自动化部署脚本，较好地完成应用日常版本的分发部署工作，提高项目组开发、测试、部署效率。同时，针对每次上线的具体要求，更新、修改线上一键部署脚本，保证生产应用版本正常分发和环境预设，确保上线任务的顺利完成。</li>
<li>负责项目组各类文档的汇总、分发工作，保证项目组日常相关文档能够及时、准确归档于cc和flpm，满足架构组对各类文档的复核、评审要求；</li>
</ol>
<h4 id="收获与进步"><a href="#收获与进步" class="headerlink" title="收获与进步"></a>收获与进步</h4><ol>
<li>通过实际参与非金融p2与p8代码的设计开发工作，较好地理解和掌握了p2与p8应用框架下的开发与测试流程。无论是对p2 PJF各应用组件的使用和调试，亦或是p8 架构 service与dao层使用和开发都能够较好地驾驭，遇到问题也能比较快速地定位并解决，保证日常开发与测试的进度与效率，满足业务测试进度要求。</li>
<li>通过负责日常测试环境的管理与运维工作，较好地理解和掌握了linux系统日常运维相关的命令和步骤，无论是对vi编辑器还是shell命令都有了更进一步实践与应用，结合两者，能根据需求快速编写出相关自动化管理脚本，从日常繁杂的手工操作中解放出来，从而可以把更多的精力和时间用来完成更有意义的事情，如代码优化、业务细分等等。</li>
<li>通过与业务人员的日常交流与学习过程中，对相关功能的业务流程和背景更加了解与熟悉，无论是直接相关业务需求还是间接的相关方的业务要求，都得到了较好地理解并梳理，从而促使自己可以站在业务的角度来思考、设计、实现系统功能，尽量保证功能的简洁、易用、高效。业务认可并便于操作的系统才是好系统，这应是我们应用开发人员的理应达到的目标。</li>
<li>通过在日常的需求、设计、开发过程中，进一步认识到团队协作与沟通的重要性。项目开发不是一人可以胜任的，需要大家各司其职、通力合作并保持有效沟通才能较好完成项目的自始至终的开发任务，也才能确保系统最后成功上线与运行。</li>
</ol>
<h4 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h4><p>2016悄然离去，崭新的2017已经到来，在新的一年里，自己需要用更饱满地精神和更积极地心态去迎接新的工作与挑战，无论是技术能力还是业务知识，都需要更进一步地深耕和探索，更需要向优秀的同事多多学习和交流，感谢身边所有领导和同事悉心的帮助和无私的指导，让自己少入好多坑，多走经验道。最后，经过两年半的洗礼，自己也渐渐成长与独立起来，无论从心态还是能力都有了较为可观的进步，力争为建行新一代建设作出更多力所能及的贡献，2017，不忘初心，继续前行！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;又是一年年终述职季，2016已远去，2017正揭开幕布，无论是生理年龄还是心理年龄又都长了一岁，无论是工作还是生活，都有了新的身份与责任。回首2016工作历程，用三个词语概括，&lt;strong&gt;忙碌&lt;/strong&gt;、&lt;strong&gt;学习&lt;/strong&gt;、&lt;strong&gt;成长&lt;/strong&gt;，即忙在工作、学在工作、成在工作。从当初的职场小白，慢慢成长为有能力独立完成工作的大白，这何尝不是一种历练和收获。下面是自己对2016年的本职工作的回顾、展望和总结概述：&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.zhujianbing.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="报告" scheme="http://www.zhujianbing.com/tags/%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>使用Sublime完成Markdown写作</title>
    <link href="http://www.zhujianbing.com//blog/2016/11/%E4%BD%BF%E7%94%A8Sublime%E5%AE%8C%E6%88%90Markdown%E5%86%99%E4%BD%9C.html"/>
    <id>http://www.zhujianbing.com//blog/2016/11/使用Sublime完成Markdown写作.html</id>
    <published>2016-11-23T03:14:30.000Z</published>
    <updated>2016-11-23T06:18:24.647Z</updated>
    
    <content type="html"><![CDATA[<p>现在使用<strong>Markdown</strong>进行写作基本已成为主流，尤其在技术流写作派中比较风靡，作为一轻量级的<strong>标记语言</strong>，只需掌握不超过十个常用的标记符号就可完成日常写作的绝大部分需求，对于技术流来说，大大提高了写作效率，因为无需考虑排版美化问题，在写作过程中也无需过多使用鼠标来“干扰”写作的进程，直接通过技术流最熟练的键盘就可以快速地完成写作过程，那么我们又有什么理由不转向<strong>Markdown</strong>来进行日常的写作需求呢，再结合自己熟悉的<strong>Sublime</strong>编辑器，从此写作过程将成为一种享受！下面详细介绍如何使用Sublime完成Markdown写作安装配置过程。  </p>
<a id="more"></a>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>通过<strong>Sublime</strong>完成<strong>Markdown</strong>写作过程，其实就只安装好<strong>Sublime</strong>编辑器即可，现在最新版本是3.0，直接去其<a href="http://www.sublimetext.com" target="_blank" rel="external">官网</a>选择最新版本下载即可（博主当前使用的版本是3.0版本），然后傻瓜式安装好即可，下面重点是针对<strong>Sublime</strong>编辑器安装支持<strong>Markdown</strong>写作的各种插件（package)安装说明，前提是已经完成package control的安装，操作比较简单，打开<strong>Sublime</strong>编辑器后，使用<code>Ctrl</code>+`或通过View-&gt;Show Console菜单打开命令行，粘贴如下代码,即可完成安装：</p>
<blockquote>
<p>import urllib.request,os; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), ‘wb’).write(urllib.request.urlopen( ‘<a href="http://sublime.wbond.net/" target="_blank" rel="external">http://sublime.wbond.net/</a>‘ + pf.replace(‘ ‘,’%20’)).read())</p>
</blockquote>
<h4 id="安装Markdown-Editing插件"><a href="#安装Markdown-Editing插件" class="headerlink" title="安装Markdown Editing插件"></a>安装Markdown Editing插件</h4><p><strong>Markdown Editing</strong>插件是一款非常强大、易用、支持Markdown语法高亮的<strong>Markdown</strong>插件，安装步骤如下：</p>
<ul>
<li>打开<strong>Sublime</strong>编辑器，输入<code>Shift</code>+<code>Ctrl</code>+<code>p</code>，然后在弹出窗口输入<strong>pcip</strong>，选择<strong>Package Control:Install Package</strong>后输入<strong>Markdown Editing</strong>,选中<code>enter</code>后就会自动完成插件的安装；</li>
<li><p>使用<strong>Markdown Editing</strong>默认配置，文本是居中显示，而且主题色比较丑，建议把当前插件的<strong>user settings</strong>文件里把如下几个配置项修改成这样：</p>
<ul>
<li>“color_scheme”: “Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme”,//修改主题色   </li>
<li>“draw_centered”: false,//设置不居中  </li>
<li>“word_wrap”: true,//强制字符换行，比如单词过长时 </li>
<li>“wrap_width”: 120,//每行最多120个字就强制换行</li>
</ul>
</li>
</ul>
<h4 id="安装OnmiMarkupPriviewer插件"><a href="#安装OnmiMarkupPriviewer插件" class="headerlink" title="安装OnmiMarkupPriviewer插件"></a>安装OnmiMarkupPriviewer插件</h4><p><strong>OnmiMarkupPriviewer</strong>插件是一款可以实时预览<strong>Markdown</strong>语法编写的内容，同样支持渲染代码高亮样式，简单易用，安装步骤如下：</p>
<ul>
<li>打开<strong>Sublime</strong>编辑器，输入<code>Shift</code>+<code>Ctrl</code>+<code>p</code>，然后在弹出窗口输入<strong>pcip</strong>，选择<strong>Package Control:Install Package</strong>后输入<strong>OnmiMarkupPriviewer</strong>,选中<code>enter</code>后就会自动完成插件的安装；</li>
<li><p>修改<strong>OnmiMarkupPriviewer</strong>插件的默认配置项，如下所列：</p>
<ul>
<li>“extensions”: [“tables”, “strikeout”,”toc”,”fenced_code”, “codehilite”]  //支持自动生成目录[TOC]语法 </li>
<li>“server_host”: “127.0.0.1”,//可以设置成本机固定的ip，方便多显示端进行展示 </li>
</ul>
</li>
<li><p>常用命令集：</p>
<ul>
<li><code>Ctrl</code>+<code>Alt</code>+<code>O</code>：打开浏览器实时查看显示效果 </li>
<li><code>Ctrl</code>+<code>Alt</code>+<code>X</code>: Export Markup as HTML把<strong>Markup</strong> 导出成html格式 </li>
<li><code>Ctrl</code>+<code>Alt</code>+<code>C</code>: Copy Markup as HTML.把<strong>Markup</strong>  以html格式拷贝，方便粘贴复制 </li>
</ul>
</li>
</ul>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>在<strong>Sublime</strong>编辑器上安装好上面两个插件<strong>MarkDown Editing</strong>和<strong>OnmiMarkupPriviewer</strong>后，基本就可以在<strong>Sublime</strong>上完成<strong>Markdown</strong>写作过程，真正实现无障碍、所写即所见地创作过程。至于其他相关插件，可根据个人喜好，有选择的安装，对于大部分写作场景都是可以轻松应付，还是那句话，入门容易，精进难，剩下的只能靠自己深入地挖掘和实践呢。由于是使用<strong>Markdown</strong>写作，还是有必要对其常用的语法进行了解和掌握，大家可以参考<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown 语法说明(简体中文版)</a>。</p>
<blockquote>
<p>转载本站文章请注明作者和出处 Jacky-朱建兵 – zhujianbing.com ，请勿用于任何商业用途</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在使用&lt;strong&gt;Markdown&lt;/strong&gt;进行写作基本已成为主流，尤其在技术流写作派中比较风靡，作为一轻量级的&lt;strong&gt;标记语言&lt;/strong&gt;，只需掌握不超过十个常用的标记符号就可完成日常写作的绝大部分需求，对于技术流来说，大大提高了写作效率，因为无需考虑排版美化问题，在写作过程中也无需过多使用鼠标来“干扰”写作的进程，直接通过技术流最熟练的键盘就可以快速地完成写作过程，那么我们又有什么理由不转向&lt;strong&gt;Markdown&lt;/strong&gt;来进行日常的写作需求呢，再结合自己熟悉的&lt;strong&gt;Sublime&lt;/strong&gt;编辑器，从此写作过程将成为一种享受！下面详细介绍如何使用Sublime完成Markdown写作安装配置过程。  &lt;/p&gt;
    
    </summary>
    
      <category term="编程工具" scheme="http://www.zhujianbing.com/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown" scheme="http://www.zhujianbing.com/tags/markdown/"/>
    
      <category term="sublime" scheme="http://www.zhujianbing.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>个人博客正式开通</title>
    <link href="http://www.zhujianbing.com//blog/2016/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E5%BC%80%E9%80%9A.html"/>
    <id>http://www.zhujianbing.com//blog/2016/11/个人博客正式开通.html</id>
    <published>2016-11-22T15:31:51.000Z</published>
    <updated>2016-11-22T15:31:52.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>

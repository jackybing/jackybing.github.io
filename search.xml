<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[hexo+github pages+域名绑定折腾记]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2Fhexo-github-pages-%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E6%8A%98%E8%85%BE%E8%AE%B0.html</url>
      <content type="text"><![CDATA[通过github pages来搭建专属于自己的技术博客是当前比较流行和方便的途径，结合轻量级静态博客框架hexo，便可以很快搭建一款属于自己的技术博客，再通过github托管自己的静态网站代码，安全、稳定、免费，同时github pages支持域名绑定，完成相关绑定后，即可通过域名来访问自己的博客空间。其实，搭建专属于自己的博客平台，好处还是蛮多的，一来可以从头到属实践建站流程，二来可以方便、自由地针对自己的喜好来完成各种定制化功能版块，满足技术流专有的瞎折腾欲望。这篇文章主要是记录博主整合hexo+github pages+域名绑定的全过程，也给后来人多一个参考、学习、交流的机会。 hexo安装记hexo是一个简单、轻量、基于Node.js的静态博客框架，既然它是基于Node.js自然也就需要依赖Node.js平台，所以在本地安装好Node.js是前提。安装很简单，无论是windows系统还是linux系统，通过其官网下载对应的版本安装即可（ps:由于墙的存在，下载速度比较慢，建议大家去其他资源网站下载对应版本），考虑到平时自己平时写博客主要是在windows环境下完成，自然就决定在windows环境下搭建好各种所需要软件信息呢，下文的所有安装、配置操作说明都是基于win7且已提前完成Node.js安装，至于linux系统环境的搭建基本类似，在此就不在赘述，请自行谷歌、百度。 github pages respos创建创建github pages respos时，和创建普通的respos过程没有区别，唯一需要注意的是respos名字是固定的：yourname.github.io，名字是注册时填写的用户名，过程很简单，在github右上方选择respository -&gt; 输入respos名称yourname.github.io -&gt; 点击完成即可。完成respos创建是为了将博客代码托管到当前respos中，通过下文介绍的hexo deploy命令方便快捷地完成博文的上传更新操作。 hexo 环境安装hexo 框架安装完成Node.js安装前提下，hexo的安装很简单，打开Node.js命令窗口，输入下面几行命令即可搞定： 12npm install -g hexo-clinpm install hexo -g hexo 插件安装（建议安装，后面定制化各种插件功能需要使用）hexo 插件安装非常简单，常用的插件也就十来种，建议全部安装，后面基于Next主题配制其他第三方插件也需要部分插件才能工作，下面是主要插件的安装命令，直接拷贝运行即可： 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save hexo 简易使用说明在安装好hexo及相关插件后，接下来我们就可能通过hexo命令来完成博客目录的初始化 12// 建立一个博客目录，并初始化博客，hexo为文件夹的名称，本地创建了一名称为hexo目录hexo init hexo 初始化完成后，进入hexo目录后，能看到如下如下目录结构 1234567├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 上面每个目录和文件的具体说明请大家参考hexo-建站，这里就不再啰嗦呢。初始化后的博客默认会下载并使用landscape 主题（theme),在themes目录下有landscape 主题目录，到这里，大家就可以启动hexo，查看博客效果呢，在Node.js命令行工具下，进入hexo目录下，输入如下几行命令： 123hexo clean //删除工具，主要是完成对上次构建产生的静态资源（html等相关文件）的清楚hexo generate //基于最新的资源构建博客的各种静态资源（html等相关文件），命令可以简化为:hexo ghexo serve //启动服务，以便在本地通过：http://localhost:4000/来查看博客界面效果 启动成功后，通过在浏览器的地址栏中输入http://localhost:4000/即可查看到博客界面效果呢。__ hexo 主题安装hexo一个便捷之处在于可以通过配置使用不用的主题，网上有很多开源的hexo主题，大家可以自动搜索浏览。hexo换主题很简单，把下载好的主题目录放置站点目录下的themes目录下并修改站点配置文件hexo/_config.yml里的theme配置项值为主题目录的名称即可。 由于hexo默认使用的主题样式不符合我的审美观，所以决定使用流行的Next主题，大家可以直接到其github官网下载最新版本，无论是clone还是download方式都可，下载到本地解压后将目录名称修改成next，然后再将此目录放置到hexo/themes目录下，同时修改hexo/_config.yml文件里的如下配置项信息： 1theme: next //把主题从landscape修改成为next 完成后重启即可看到引用新主题的博客样式效果呢。Next主题很强大，配置灵活，可以集成多种第三方插件，比如搜索、统计、评论、分享等插件，具体配置请参考其官网，这里就不再啰嗦呢。 git安装安装git的目的是为了后期可以方便地将最新编辑完成的博文上传到github中，前提是安装了我们上面建议安装的hexo git 插件，修改站点配置文件hexo/_config.yml的deploy配置项： 1234deploy: type: git repository: git@github.com:jackybing/jackybing.github.io.git //jackybing是github帐号名 branch: master 然后直接通过如下命令就可以完成代码的提交工作，方便、快捷： 1hexo deploy //将代码提交到github 仓库，可以简写为：hexo d 安装git的操作就自行百度之，这里就不再重复了，过程很简单，下载安装包（windows版本）-&gt;安装-&gt;生成ssh key-&gt;把公钥拷贝到github帐号下ssh keys集合即可。 域名绑定如果不想直接通过yourname.github.io来访问托管在github上的博客的话，需要自己单独购买注册域名，然后把解析设置好，同时在站点根目录下的source目录下新建名为CNAME文件，里面就是我们购买注册好的域名，注意：域名不要带http,直接填写域名，如:www.zhujianbing.com,同时将站点配置文件的url项值设置为带http开头的域名，如：http://www.zhujianbing.com即可。 域名购买和解析域名购买可以通过DNSPod或者万网进行购买，由于博主在购买时万网有优惠活动，所以就果断在万网注册购买了自己的专属域名：zhujianbing.com,在万网购买域名后，修改DNS*服务器：f1g1ns1.dnspod.net和f1g1ns2.dnspod.net，然后去DNSPod**注册个帐号，添加域名和记录。通过cmd命令行窗口，ping yourname.github.com,即可获取到github pages的专属ip（gp IP),然后添加A记录类型和CNAME类型即可： 主机记录 记录类型 线路 记录值 @ A 默认 gh IP www CNAME 默认 yourname.github.ip 具体可参考【Hexo+Github】域名和github绑定的问题此文章内容，比较简单，就不再赘述。 域名配置完成域名购买和解析后，需要在站点目录的source目录下新建名为CNAME文件，内容就是我们购买注册好的域名，注意：域名不要带http,直接填写域名，如:www.zhujianbing.com,同时将站点配置文件的url项值设置为带http开关的域名，如：http://www.zhujianbing.com即可。最后重新clean -&gt;generate -&gt;deploy操作后，正常情况下，在半小时内域名解析即可完成，然后就可通过输入自己专属域名来访问个人博客呢。 到这一步，我们的hexo+github pages+域名绑定流程也算是正式完成呢，之间会遇到各种配置的小问题，尤其是Next相关的，通过查看其其github官网，再结合hexo 官网，应该不会什么解决不了的大BUG问题呢！如果需要帮助，请在评论区留言，博主会在第一时间给予解答。 Next 主题配置”坑” 配置404.html界面：使用腾讯的404界面，其中homePageUrl项必须以http开头，不然无法返回主页 homePageUrl=”http://www.zhujianbing.com“ //必须以http开头，不然无法解析成正确的主页地址 修改Next默认字体和字号 修改主题目录下的themes\next\source\css\_variables\custome.styl文件，添加下面代码，主要是设置自己想要的字体： 1234567891011121314// 标题，修改成你期望的字体族$font-family-headings = Georgia, sans// 修改成你期望的字体族$font-family-base = "Microsoft YaHei", Verdana, sans-serif// 代码字体$code-font-family = "Input Mono", "PT Mono", Consolas, Monaco, Menlo, monospace// 正文字体的大小$font-size-base = 16px// 代码字体的大小$code-font-size = 13px 待续… 总结其实，hexo+github pages+域名绑定配置过程并不复杂，只有稍微具备些技术功能+搜索能力基本上都可以搞定，而Next主题的应用配置根据其官网说明，也都是依样画葫芦，没什么难度。对于有DIY欲的同学来说，如果想手工修改主题模式，那就必须具备些网页开发的基础呢！其实个人博客样式并不重要，重要的是里面的内容质量，唯有产生高价值的内容才会有较高的访问率，也才能达到我们写博客的目的：既方便自己加深知识的理解又给别人更多的参考交流机会。 转载本站文章请注明作者和出处 Jacky-朱建兵 – zhujianbing.com ，请勿用于任何商业用途]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016年终述职报告]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2F2016%E5%B9%B4%E7%BB%88%E8%BF%B0%E8%81%8C%E6%8A%A5%E5%91%8A.html</url>
      <content type="text"><![CDATA[####前言又是一年年终述职季，2016已远去，2017正揭开幕布，无论是生理年龄还是心理年龄又都长了一岁，无论是工作还是生活，都有了新的身份与责任。回首2016工作历程，用三个词语概括，忙碌、学习、成长，即忙在工作、学在工作、成在工作。从当初的职场小白，慢慢成长为有能力独立完成工作的大白，这何尝不是一种历练和收获。下面是自己对2016年的本职工作的回顾、展望和总结概述： ####主要工作内容 参与非金融项目开发工作，从梳理需求到功能设计实现，负责的服务目录与对账模块已成功上线，运行稳定。服务目录模块方面主要完成服务大类，服务类别、服务项目、特色活动、权益和权益套餐的新增、修改、审核、进度查询和撤销等一整套服务目录维护流程功能，方便业务人员可以较为简单、便捷地完成对各类服务目录的日常维护事宜；同时，针对不同服务项目不同部门的预约门槛判断规则，设计、实现一套较为灵活、可配的校验接口，用于各种渠道门槛判断，打通服务项目预约功能流程；对账模块方面主要完成针对合作项目与服务项目按季度为周期的对账单生成、下载、反馈功能，协助批量定时对上一季度相关合作项目与服务项目的订单数据进行汇总和处理，打通合作伙伴线上完成对争议订单反馈流程，行内人员可实现对争议订单的最终核实处理； 负责系统日常上线事宜，主要完成对日常应用版本的打包、分发工作，并且负责测试环境版本的日常维护更新工作，通过编写自动化部署脚本，较好地完成应用日常版本的分发部署工作，提高项目组开发、测试、部署效率。同时，针对每次上线的具体要求，更新、修改线上一键部署脚本，保证生产应用版本正常分发和环境预设，确保上线任务的顺利完成。 负责项目组各类文档的汇总、分发工作，保证项目组日常相关文档能够及时、准确归档于cc和flpm，满足架构组对各类文档的复核、评审要求； ####收获与进步 通过实际参与非金融p2与p8代码的设计开发工作，较好地理解和掌握了p2与p8应用框架下的开发与测试流程。无论是对p2 PJF各应用组件的使用和调试，亦或是p8 架构 service与dao层使用和开发都能够较好地驾驭，遇到问题也能比较快速地定位并解决，保证日常开发与测试的进度与效率，满足业务测试进度要求。 通过负责日常测试环境的管理与运维工作，较好地理解和掌握了linux系统日常运维相关的命令和步骤，无论是对vi编辑器还是shell命令都有了更进一步实践与应用，结合两者，能根据需求快速编写出相关自动化管理脚本，从日常繁杂的手工操作中解放出来，从而可以把更多的精力和时间用来完成更有意义的事情，如代码优化、业务细分等等。 通过与业务人员的日常交流与学习过程中，对相关功能的业务流程和背景更加了解与熟悉，无论是直接相关业务需求还是间接的相关方的业务要求，都得到了较好地理解并梳理，从而促使自己可以站在业务的角度来思考、设计、实现系统功能，尽量保证功能的简洁、易用、高效。业务认可并便于操作的系统才是好系统，这应是我们应用开发人员的理应达到的目标。 通过在日常的需求、设计、开发过程中，进一步认识到团队协作与沟通的重要性。项目开发不是一人可以胜任的，需要大家各司其职、通力合作并保持有效沟通才能较好完成项目的自始至终的开发任务，也才能确保系统最后成功上线与运行。 ####展望未来2016悄然离去，崭新的2017已经到来，在新的一年里，自己需要用更饱满地精神和更积极地心态去迎接新的工作与挑战，无论是技术能力还是业务知识，都需要更进一步地深耕和探索，更需要向优秀的同事多多学习和交流，感谢身边所有领导和同事悉心的帮助和无私的指导，让自己少入好多坑，多走经验道。最后，经过两年半的洗礼，自己也渐渐成长与独立起来，无论从心态还是能力都有了较为可观的进步，力争为建行新一代建设作出更多力所能及的贡献，2017，不忘初心，继续前行！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Sublime完成Markdown写作]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2F%E4%BD%BF%E7%94%A8Sublime%E5%AE%8C%E6%88%90Markdown%E5%86%99%E4%BD%9C.html</url>
      <content type="text"><![CDATA[现在使用Markdown进行写作基本已成为主流，尤其在技术流写作派中比较风靡，作为一轻量级的标记语言，只需掌握不超过十个常用的标记符号就可完成日常写作的绝大部分需求，对于技术流来说，大大提高了写作效率，因为无需考虑排版美化问题，在写作过程中也无需过多使用鼠标来“干扰”写作的进程，直接通过技术流最熟练的键盘就可以快速地完成写作过程，那么我们又有什么理由不转向Markdown来进行日常的写作需求呢，再结合自己熟悉的Sublime编辑器，从此写作过程将成为一种享受！下面详细介绍如何使用Sublime完成Markdown写作安装配置过程。 软件安装通过Sublime完成Markdown写作过程，其实就只安装好Sublime编辑器即可，现在最新版本是3.0，直接去其官网选择最新版本下载即可（博主当前使用的版本是3.0版本），然后傻瓜式安装好即可，下面重点是针对Sublime编辑器安装支持Markdown写作的各种插件（package)安装说明，前提是已经完成package control的安装，操作比较简单，打开Sublime编辑器后，使用Ctrl+`或通过View-&gt;Show Console菜单打开命令行，粘贴如下代码,即可完成安装： import urllib.request,os; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), ‘wb’).write(urllib.request.urlopen( ‘http://sublime.wbond.net/‘ + pf.replace(‘ ‘,’%20’)).read()) 安装Markdown Editing插件Markdown Editing插件是一款非常强大、易用、支持Markdown语法高亮的Markdown插件，安装步骤如下： 打开Sublime编辑器，输入Shift+Ctrl+p，然后在弹出窗口输入pcip，选择Package Control:Install Package后输入Markdown Editing,选中enter后就会自动完成插件的安装； 使用Markdown Editing默认配置，文本是居中显示，而且主题色比较丑，建议把当前插件的user settings文件里把如下几个配置项修改成这样： “color_scheme”: “Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme”,//修改主题色 “draw_centered”: false,//设置不居中 “word_wrap”: true,//强制字符换行，比如单词过长时 “wrap_width”: 120,//每行最多120个字就强制换行 安装OnmiMarkupPriviewer插件OnmiMarkupPriviewer插件是一款可以实时预览Markdown语法编写的内容，同样支持渲染代码高亮样式，简单易用，安装步骤如下： 打开Sublime编辑器，输入Shift+Ctrl+p，然后在弹出窗口输入pcip，选择Package Control:Install Package后输入OnmiMarkupPriviewer,选中enter后就会自动完成插件的安装； 修改OnmiMarkupPriviewer插件的默认配置项，如下所列： “extensions”: [“tables”, “strikeout”,”toc”,”fenced_code”, “codehilite”] //支持自动生成目录[TOC]语法 “server_host”: “127.0.0.1”,//可以设置成本机固定的ip，方便多显示端进行展示 常用命令集： Ctrl+Alt+O：打开浏览器实时查看显示效果 Ctrl+Alt+X: Export Markup as HTML把Markup 导出成html格式 Ctrl+Alt+C: Copy Markup as HTML.把Markup 以html格式拷贝，方便粘贴复制 结束语在Sublime编辑器上安装好上面两个插件MarkDown Editing和OnmiMarkupPriviewer后，基本就可以在Sublime上完成Markdown写作过程，真正实现无障碍、所写即所见地创作过程。至于其他相关插件，可根据个人喜好，有选择的安装，对于大部分写作场景都是可以轻松应付，还是那句话，入门容易，精进难，剩下的只能靠自己深入地挖掘和实践呢。由于是使用Markdown写作，还是有必要对其常用的语法进行了解和掌握，大家可以参考Markdown 语法说明(简体中文版)。 转载本站文章请注明作者和出处 Jacky-朱建兵 – zhujianbing.com ，请勿用于任何商业用途]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人博客正式开通]]></title>
      <url>%2F%2Fblog%2F2016%2F11%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E5%BC%80%E9%80%9A.html</url>
      <content type="text"></content>
    </entry>

    
  
  
</search>
